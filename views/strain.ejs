<!-- <h1> hey </h1> -->
<!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <style> 
       
        .strainBody {
            display: flex;
            flex-direction: column;
            align-items: center;
            /* overflow: hidden; */

        }
        .containerCont {
            display: flex;
            flex-direction: column;
            align-items: center; 
        }
        .strainContainer {
            display: flex;
            flex-direction: column;
            align-items: center;
            /* background-image: url('/img/helmet.png');
            background-size: cover;
            background-repeat: no-repeat; */
        }

        .displayContainer {
            /* margin-top: 3em; */
            margin: 0em 2em 0em 2em;
            /* padding-top: 3em; */
            height: 100px;
            width: 800px;
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
            background-color: rgb(62, 50, 32);
            border: 3px solid rgb(247, 208, 36);
            box-shadow: inset 8px 6px 9px papayawhip;
        }
         .dbList {
            list-style-type: none;
            color: papayawhip;
            font-weight: bold;
            font-family: URW Chancery Lew;
            display: flex;
            flex-direction: column;
            align-items: center;
            /* justify-content: center; */
        }
        .dbList2 {
            text-align: center;
            color: papayawhip;
            font-weight: bold;
            padding: 2.25em;
            margin: 1em;
        }
        .dbStrainBucket {
            list-style-type: none;
            color: papayawhip;
            font-weight: bold;
            font-family: URW Chancery Lew;
            display: flex;
            flex-flow: row wrap;
            justify-content: center;
        }
        h1 {
            text-align: center;
        }
        

        .effectContainer {
            padding: 0;
            margin: 0em 3em 0em 3em;
            align-self: center;
            list-style-type: none;
            color: papayawhip;
            font-weight: bold;
            font-family: URW Chancery Lew;
             display: flex;
            flex-direction: column;
            align-items: center; 
            /* justify-content: center; */
        }
        .searchIn {
            margin-top: 5em;
            height: 8em;
            color: black;
            background-image: url('/img/signupsigns.png');
            background-size: cover;
            background-repeat: no-repeat;
            font-weight: gold;
            text-align: center;
            border: 3px solid #FFA663;             
            /* text-shadow: 1px 1px 1px rgb(247, 208, 36); */ 
            border-radius: 40%;
        }
        .cactus {
            /* position: absolute;  hmm... */ 
            margin-top: -8em;
        }
        .ghost {
            opacity: 0.0;
        }
        .newGrid {
            overflow: scroll;
            display: flex;
            flex-flow: row wrap;
            justify-content: center;            
        }
        .papaya {
            font-family: Chancery Urw L;
            text-align: center;
            font-size: 22px;
            color: papayawhip;
        }
        .searchGrid {    
            overflow: scroll;                       /* we dont need the scroll here but i think it looks okay. */
            height: 7em;
            width: 8em;
            border: 3px solid papayawhip;
            box-shadow: 3px 6px 9px rgb(247, 208, 36);
            margin-top: 4em;
            display: flex;
            flex-flow: row nowrap;
            justify-content: space-around;
        }
        .mine {         
            height: 45px;
            width: 45px;
            border: 2px solid papayawhip;
            border-radius: 50%;
            background-image: url('/img/mine.png');
            box-shadow: 10px 10px 10px papayawhip;
            background-size: cover;
            background-repeat: no-repeat;
            margin-top: 1em;
        }

::-webkit-scrollbar {
  width: 20px;
}

/* Track */
::-webkit-scrollbar-track {
  box-shadow: inset 5px 9px 5px grey;
  border-radius: 10px;
}

/* Handle */
::-webkit-scrollbar-thumb {
  background: papayawhip;
  border-radius: 10px;
}
        form {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        ul {
            padding: 0;
        }
        .li {
            opacity: 0.3;
            margin-top: 0.7em;
            list-style-type: none;
            font-size: 22px;
            color: papayawhip;
            line-height: 9.9em;
            /* line-height: 7.7em; */
            text-shadow: 1px 1px 1px rgb(247, 208, 36);
            /* box-shadow: 9px 3px 6px papayawhip; */
            box-shadow: 3px 3px 9px papayawhip;
        }
        p {
            /* margin: 3em 2em 3.3em 2em; */
            color: papayawhip;
            font-size: 22px;
            text-shadow: 1px 1px 1px rgb(247, 208, 36)
        }
        .grid {
            display: grid;
             grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr;           
             /* // goal 10 by 3 for 30 or so units of data. well need a good sized grid. currently working with 7 as a mock start.  */ 
            grid-template-columns: 1fr; 
        }
        .doubleSize {
        transform: scale(2.0);
        }
        .mineCartContainer {
            height: 100px;
            width: 100px;
            background-color: papayawhip;
        }
        .likelist {
            display: flex;
            flex-flow: row nowrap;
            justify-content: row;
            overflow-x: scroll;
            /* border: 3px solid hotpink; */
        }
        .likeLI {
            margin-top: 250px;
            color: white;
        }
        
        /* @media screen and (min-device-width: 777px) and (max-device-width: 1020px) {
            .strainBody {
                background-color: blue
            }
        } */
        /* @media screen and (min-device-width: 777px) and (max-device-width: 1020px) { 
            .strainBody {
                background-color: orange;
            }
        } */

        /* @media only screen and (min-device-width: 770px) and (max-device-width: 1024px) { */
        @media only screen and (max-device-width: 1024px) {
            .strainBody {
                background-color: blue !important;
            }
            form {
                border: 20px solid orange !important;
            }
        
        }

        

    </style>
    <body class="strainBody">
        
        <%- include('./partials/navBar') %>
        
        <div class="containerCont">
            <div class="strainContainer">
                <img src="/img/helmet.png" id="strainbarrel">
                <%- include('./partials/alerts') %>
                <form action="ajaxstrain" method="POST" id="strainform">
                    <input type="text" name="age" value="confirm Age Please" class="ageconfirminput">
                <input type="submit" id="submit">
            </form>
            
            
            <!-- <img src="/img/barrels.png" id="strainbarrel"> -->
        </div>

        </div>
        
        <!-- pick&&choose $.ajax({ we work with res.render: {alldb} we render and access favorite strains. ajax can save 1,2,3, new strains without update.}) -->
        <!-- we can find this by allowing the newGrid to have new additions from our apiStrainData [while checking for duplicates] -->
        <div class="dbStrainBucket">
            
            <% allDB.forEach( (dbstrain) => { %>        
                <ul class="dbList">
                    <div class="effectContainer">
                        <li class="liStrain"> <%= dbstrain.strain %></li>
                        <img class="shovel" src="/img/shovel.png">
                        <!-- <form method="POST" action="/strain/digmine" class="mineform">  i had a form in here that was going to post the db.like but then went with ajax to bypass the url changing aspect of <form>submit</form>-->            
                    </ul>
                    <% })  %>
                </div>
            </div>

            <input type="search" class="searchIn" incremental="true" list="dbList" pattern=".{2,}" maxlength="1" name="q" required>
            
            <footer>
                <p class="hiddenUserDataReference"> <%= ejsuser.age %></p>
                <p id="allDb" class="hiddenUserDataReference"> <%= {allDB}%></p>
                <p class="hiddenUserDataReference" id="user"> <%= ejsuser %> </p>
                <p class="hiddenUserDataReference" id="ejsname"> <%= ejsuser.username %></p>
                <!-- <ul class="hiddenUserDataReference"> -->
                <ul class="hiddenUserDataReference likelist">
                    <% likes.forEach( (like) => { %>
                        <% console.log('this is our likes') %>
                        <li class="likeLI"> <%= like.strainId %> <%= like.userId %>  </li>
                        <!-- < % console.log(like) %> -->
                    <% }) %>
                </ul>
                <ul class="hiddenUserDataReference userlist">
                    <% allusers.forEach( (userlistuser) => { %>
                        <% console.log("this is the userlist USER !!!!!******") %>
                        <% console.log(userlistuser) %>
                        <li class="userLI"> <%= userlistuser.username %> <%= userlistuser.id %> </li>  <!-- was making mistake with <3 allusers.username <3 instead of the forEach(argument/placeholder) --->
                    <% }) %>
                </ul>

                <ul class="hiddenUserDataReference reviewlist">
                    <% console.log('this is our reviews') %>
                    <% reviews.forEach( (review) => { %>
                        <% console.log(review) %>
                        <li class="reviewLI"><%= review.review %> <%= review.strainId %> <%= review.title %> </li> <!-- i decided to put the strainId in the middle because a regex to grab the <3review.title%> would be easier if we had a number separating the 'string' values i beli -->
                    <% }) %>
                </ul>
                <!-- <p class="hiddenUserDataReference" id="likes"> < %= {likes} %></p> -->
            <!-- <div class="mineCartContainer"> I THREW A MINE CART IN HERE BUT IT WAS CREATED ONTO THE MIDDLE OF THE PAGE. lets .insertAfter the cactus </div> -->
        </footer>
    </body>
</html>



<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script>


    // nice to have a personal "scope"/spectrum of wondering whether its easier to do things in a way thats individual & moving from other parts. 
    goldCount = 0
    wholeGoldCount = new Array()
    
    let formHover = false
    // if (!$('#strainbarrel')) {
    //     console.log('theres a strainBarrel')
    // } else {
    //     console.log('not anymore')
    // }
        
    let dbStrainBucket = $('.dbStrainBucket')
    dbStrainBucket.hide()    



    let formName = $('#ejsname')[0].outerText                     
    let strainName = $('.liStrain')[0].outerText
    
    const createMine = () => {
        let searchMine = document.createElement('div')
        $(searchMine)
        .css('height', '45px')
        .css('width', '45px')
        .css('border', '2px solid papayawhip')
        .css('border-radius', '50%')          
        .css('background-image', `url('/img/mine.png')`)
        .css('box-shadow', '10px 10px 10px papayawhip')
        .css('background-size', 'cover')
        .css('background-repeat', 'no-repeat')
        .css('margin-top', '1em')
        return $(searchMine)
    }


    $('ul').children()
    .css('margin-top', '4em')

       $('.nameOrNugget').siblings().on('mouseenter', () => { // nice. this works. second time using it. Didn't want to have to hover over the text since it says to hover over the bars. I could done $('.nav img') $('.nav > img') n friends.. etc.

                    // if (formHover == true) {   // ************************* first time I've used a boolean to be honest.
                        goldCount++
                        wholeGoldCount.push(goldCount)                    
                            if (wholeGoldCount.length % 2 == 0) {  
                                inp.show()                              
                                $('.mineform').children().detach()
                                // prepare if(block) boolean.setTrue(uponBehavior) vs checking jq objects for existence. 
                                if ($('.strainBody')) {  // couldve used mutationObserver for this but am trying to clear this project out & as of today want no pics of thc 
                            $('.containerCont').hide()
                            dbStrainBucket.show()
                                    
                            let newGrid = document.createElement('div')
                                $(newGrid)
                                .addClass('newGrid')
                                // I see a true-to-theme aspect of having a small narrow container that you'd dig/scroll downward into to see single-value by single-value. it sounds .nonPretty() though.
                                .css('height', height*0.3)
                                .css('width', height*0.4)
                                .css('border', '3px solid papayawhip')
                                .css('box-shadow', '3px 6px 9px rgb(247, 208, 36)')
                                .css('margin-top', '4em')
                                    
                            let searchGrid = document.createElement('div')
                            $(searchGrid)
                            .addClass("searchGrid")
                            .css('border', '5px solid papayawhip')
                            .css('height', '100px')
                            .css('width', '500px')
                          
                                    $('.strainBody').append($(newGrid))
                                    $('.strainBody').append($(searchGrid))
                                    $(newGrid).append(dbStrainBucket)
                                    $(newGrid).insertBefore($('footer')) 
                                    $(searchGrid).insertBefore('footer')
                                                                                        
                                } else { console.log('nothing')}
                            }   else {
                                $('.searchGrid').hide() 
                                                               
                                inp.hide()
                                $('.newGrid').detach()
                                $('.containerCont').show()
                            }

   })

    let strainContWidth = $('.strainContainer')[0].clientWidth
    // $('.displayContainer').addClass('doubleSize') // .width, '${strainContWidth}' it wasn't matching the jquery object clientWidth. that clientWidth was 400

    let cherrypiebg = '/img/strain_photo/cherrypie.png '
    let DoSiDosbg = '/img/strain_photo/Do-Si-Dos.png '
    let GorillaGlue4bg = '/img/strain_photo/GorillaGlue#4.png '
    let mimosabg = '/img/strain_photo/mimosa.png '
    let pineappleexpressbg = '/img/strain_photo/pineappleexpress.png '
    let weddingcakebg = '/img/strain_photo/weddingcake.png'
    let whitewidowbg = '/img/strain_photo/whitewidow.png'
    let bgBucket = [cherrypiebg, DoSiDosbg, GorillaGlue4bg, mimosabg, pineappleexpressbg, weddingcakebg, whitewidowbg]

    let bod = $('.strainBody')
    bod
    .css('background-color', 'rgb(62, 50, 32')
    .css('display', 'flex')
    .css('flex-direction', 'column')
    .css('align-items', 'center')

    let pageHeight = $(document).height().toFixed()
    let pageWidth = $(document).height().toFixed()

    let cactus = document.createElement("img") // insane to even think about using the navbar to set a footer. would have a footer.ejs partials instead of course.
    $(cactus)
    .addClass('cactus')
    .css("height", '50px')
    .css('width', "50px")
    .attr('src', '/img/cactus.png')
    .css('margin-top', pageHeight*0.4) // :)
    $('footer').append($(cactus))   

   let inp = $('.searchIn')
   inp.hide()

    let textBucket = []
    let objectBucket = []

    let likeBucket = []
    let userObjectBucket = new Array()

    let useridbucket = new Array()

    let reviewBucket = []
    let userObjectBucket2 = [] // just so we have some space away from the other bucket array clears itself upon behavior
    
    let strainidbucket = []
    const reviewbucket = []

    // const grabUsers = () => {
    //     $('.userLI').each( (index, user) => {
    //         // console.log('user')
    //         console.log( $(user).text())
    //         return [$(user).text()]
    //     })
    // }
    // grabUsers()

    const storeuser = () => {
        $('.userLI').each( (index, user) => {
            // userObjectBucket.push(user.username)
            userObjectBucket.push($(user).text())            
        })
        console.log('thats how we do that')
        console.log(userObjectBucket)
    }
    storeuser()


    inp.on('search', (event) => {
        let ajurl = `https://frankcollins3.github.io/strainuous/strain.json`
        $.ajax({
                        method: 'GET',
                        url: ajurl,
                        dataTypes: 'json',
                    }).done( (data) => {
                     let innerajstrain = data.strains
                     console.log('innerajstrain')
                     console.log(innerajstrain)
                     

                     let returnId = (elem) => {             
                        for (let i = 0; i < innerajstrain.length; i++) {
                            // if (innerajstrain[i].strain == elem) {
                            if (innerajstrain[i].strain.includes(elem)) {
                                let id = (i) + 1
                                console.log('id')
                                console.log(id)
                                return id                                
                                // console.log(innerajstrain[i].strain)                                        // forgot theres no strain id associated with the api. good thing we can reference the sequelizeTable.id    2) no sequelizetableId with the api.  3) lucky enough its in the exact same order we need it. We can access the array and return [index] + 1 and that will equal our id.

                            }
                        }
                     }
                    //  console.log("give me the returnId")
                    //  returnId('white widow')
                    

        $('.searchGrid').children().detach()         // this is our container.truncate() method.
        let searchword = $(event.target).val() // kind of wanted [.target.val().UpperCase()]
        // console.log($('.liStrain'))       
        $('.liStrain').each( (i, strain) => {            
            // console.log('WERE IN THE LI STRAIN EACH LOOP')
            let firstLetter = $(strain).text().charAt(1)
            if (firstLetter == searchword) {     // i wonder why strict equality only returns 1 value when other dataNames satisfy the condition of ".charAt(1) == 'w' for example.". 
            
            let searchStrainText = $(strain).text()

            let searchMine = document.createElement('div')
            $(searchMine)
            .addClass('mine')               // might leave .css("margin-top") out of the .mine properties so we can reuse this with slight difference. It won't override the 
            $('.searchGrid').append(createMine())              // interesting.
                                
            let searchMineLabel = document.createElement('h1')
            $(searchMineLabel)
            .attr('id', 'searchMineLabel')
            .addClass('papaya')
             
            .html(searchStrainText)
            $('.searchGrid').append($(searchMineLabel))
            $(searchMineLabel)
            .on('mouseenter', (event) => {

                const addToGrid = () => {
                    let columncont = document.createElement('div')
                    $(columncont)
                    .attr('id', 'columncont')
                    .addClass('dbList2')            
                    // console.log('hey')
                    // console.log($(event.target))
                    $('.newGrid').children().hide()
                    let text = $(event.target).text()
                    let ptagtext = document.createElement('h1')
                    $(ptagtext)
                    .text(text)
                    .attr('id', 'ptagtext')
                    .css('color', 'rgb(247, 208, 36)')
                    .css('font-size', '50px')  
                    // .css('text-align', )
                        // $('.newGrid').css('border', '5px solid hotpink')
                        console.log($('.newGrid'))
                        $('.newGrid').append($(ptagtext))    
    
                    for (let i = 0; i < innerajstrain.length; i++) {
                        if (innerajstrain[i].strain.replace(/\s/g, '') == searchStrainText.replace(/\s/g, '')) {
                            newGridIndex = innerajstrain[i]
                            // console.log('newGridIndex.nugget')
                            // console.log(newGridIndex.nugget)
    
                            let taste = document.createElement('p')
                            $(taste)
                            .addClass('papaya')
                            .text(`Taste: ${newGridIndex.taste}`)
    
                            let smell = document.createElement('p')
                            $(smell)
                            .addClass('papaya')
                            .text(`Smell: ${newGridIndex.smell}`)
    
                            let touch = document.createElement('p')
                            $(touch)
                            .addClass('papaya')
                            .text(`Touch: ${newGridIndex.nugget}`)
    
                            // M    I   N   E   
                            let strength = document.createElement('p')
                            $(strength)
                            .addClass('papaya')
                            .text(`thc: ${newGridIndex.thc} cbd: ${newGridIndex.cbd}`)
                            // console.log(innerajstrain[i].strain.replace(/\s/g, ''))
                            // console.log("hey we finnally gottit")
                            $('.newGrid')
                            .append($(columncont))
                            $(columncont)
                            .append($(taste)) 
                            .append($(smell))
                            .append($(touch))
                            .append($(strength))

                        }                                   
                    }
                }
                addToGrid()
                const checklikes = () => {
                    
                         let strainForUsers = $('#ptagtext').text()
                         $('.likeLI').each( (index, like) => {
                            let content = like.textContent.toString().replace(/['']/g, '') // .split() // can seem to use **[] || '' ** new Array() or 'string' ** .split i                         
                            const useridRegex = content.match(/\d+/g)?.[1]
                        likeBucket.push(content)            
                    })
                    }
                checklikes()   

                            const findLikesByMatchingIds = () => {
                                let strainForIdFunction = $('#ptagtext')[0].innerText       // painful 90min+ problem trying $('#ptagtext').text() 
                                let whitewid = 'white widow' // i wonder why this works but the characters returned from console.log(strainForIdFunction) dont do anything.
                                for (let i = 0; i < innerajstrain.length; i++) {
                                    if (innerajstrain[i].strain == strainForIdFunction) {
                                        let strainloopid = (i) + 1                                    
                                        for (let i = 0; i < likeBucket.length; i++) {
                                            if (likeBucket[i].match(/\d+/g)?.[0] == strainloopid) {                                            
                                              useridbucket.push(likeBucket[i].match(/\d+/g)?.[1])       // with our ids pushed to our bucket we can now use a different function to access the userobjects in the userobject.length array 
                                        }                                
                                }                             
                                }
                            }
                        }

                        findLikesByMatchingIds()

                        const accessUserObjects = () => {
                            console.log("creating container and appending usernames.")                
                            // let shovel = document.createElement('div') was going to
                          

                            let usernamecontainer = document.createElement('div')                                
                            $(usernamecontainer)                            
                            .attr('id', 'usernamecontainer')
                            .addClass('dbList')
                            .css('border', '5px solid papayawhip')
                            $('.newGrid').append($(usernamecontainer))
                            let usernameh1 = document.createElement('h1')
                            $(usernameh1)
                            .text('Into It:')
                            .css('color', 'papayawhip')
                            .css('font-family', 'Urw Chancery L')
                            .css('font-size', '28px')
                            $(usernamecontainer).append($(usernameh1))

                            // console.log("now were in here")
                            // console.log(useridbucket)
                            userObjectBucket.forEach( (user) => {
                                // console.log('user')
                                // console.log(user)
                                // console.log(user.replace(/[a-z]/g, ''))
                                // let cleanId = user.replace(/\+d/g, '')
                                let cleanId = user.replace(/[a-z]/g, '') // even after guessing this after messing it up before it still wasnt the first regex in mind to reach for. 
                                // console.log(cleanId)
                                // console.log('cleanId')
                                for (let i = 0; i < useridbucket.length; i++) {
                                    // im using the index instead of cleanId because i believe: if i use cleanId and return/console.log(user.nameregex) it'll apply for all of them. 
                                    // if (useridbucket[i].replace(/[a-z]/g, '') ==  )
                                    // 
                                     if (parseInt(useridbucket[i]) == user.replace(/[a-z]/g, '')) {
                                       
                                        let nameOfUser = user.replace(/[0-9]/g, '')

                                        let username = document.createElement('p')
                                        $(username)
                                        .attr("id", 'usernameP')
                                        .text(nameOfUser)
                                        .addClass('papaya')
                                        $(usernamecontainer).append($(username))
                                        // to show likes click the shovel that .show() the like container.

                                     }       

                                }
                                
                            })
                        }
                        accessUserObjects()


                        const pushIdToBucket = () => {
                            console.log('were in the user reviews')
                            console.log("p tag text")
                            console.log($('#ptagtext').text())
                            let containertext = $('#ptagtext').text().replace(/\s/g, '')
                            console.log('containertext')
                            console.log(containertext)
                            for (let i = 0; i < innerajstrain.length; i++) {
                                console.log("userreview ajax loop")
                                if (innerajstrain[i].strain.replace(/\s/g, '') == containertext) {
                                    console.log("in the containertext ajax conditional")
                                    let reviewAndAjaxId = (i) + 1
                                   strainidbucket.push(reviewAndAjaxId)
                                   console.log(reviewAndAjaxId) 
                                   reviewAndAjaxId = ''
                                   console.log('reviewAndAjaxId') 
                                   console.log(reviewAndAjaxId) 
                                   console.log('strainidbucket we are in the pushidToBucket function!!')
                                   console.log(strainidbucket)
                                    console.log(innerajstrain[i])
                                }
                            }
                        }
                        pushIdToBucket()

                        const userAndReviews = () => {
                            let reviewContainer = document.createElement('div')
                            $(reviewContainer)
                            .attr('id', 'reviewContainer')
                            .css('border', '5px solid papayawhip')
                            .css('height', '300px')
                            .css('width', '300px')
                            .css('overflow', 'scroll')
                            .css('padding', '0em 5em 0em 5em')
                            .css('margin', '2em')
                            .addClass('dbList')
                            // $('.newGrid').append($(reviewContainer))
                            $(reviewContainer).insertAfter($('#usernamecontainer'))

                            // $('.liStrain').forEach( (user) => {
                                userObjectBucket.forEach( (user) => {
                                // console.log('user reviews user')
                                // console.log(user)
                                let cleanId = user.replace(/[a-z]/g, '')
                                // console.log('cleanId in the reviews and user')
                                // console.log(cleanId)
                                $('.reviewLI').each( (index, review) => {
                                    console.log("looping in the reviewli")
                                    // console.log('review')
                                    let reviewelemtext = $(review).text()
                                    let reviewNumb = reviewelemtext.replace(/[a-z]/g, '')   // this is the strainId
                                    console.log('reviewNumb')
                                    console.log(reviewNumb)
                                    

                                    let username = reviewelemtext.replace(/.+(?=[0-9])/g, '').slice(1).replace(/\s/g, '')
                                    const indexOfNumber = reviewelemtext.indexOf(parseInt(`${reviewNumb}`))
                                    console.log('indexOfNumber')
                                    console.log(indexOfNumber)
                                    let b4number = reviewelemtext.slice(0, parseInt(`${indexOfNumber+1}`)).replace(/[0-9]/g, '')  // this returns every character before the number. This feels very computer-codey to specify index of integer in characters and slice for the .charAt()/position in index. 
                                    console.log('b4number')
                                    console.log(b4number)
                                    for (let i = 0; i < strainidbucket.length; i++) {
                                        if (strainidbucket[i] == reviewNumb) {
                                            console.log("strainbucket[i] == reviewNumb")
                                            console.log(strainidbucket[i])
                                            console.log('username')
                                            console.log(username)
                                            let content = `${username}: ${b4number}`
                                            
                                            // let contentptag = document.createElement("p")
                                            // $(contentptag)
                                            // .text(content)
                                            // .addClass('contentptag')
                                            // .addClass('papaya')
                                
                                            // if (!$('#reviewContainer').includes($(contentptag))) {
                                            //     $('#reviewContainer').append($(contentptag))
                                            // }

                                            if (!reviewBucket.includes(content)) {    // we can use this to prevent duplicates in our array.
                                                reviewBucket.push(content)                                                
                                            }                                            
                                        }                                                             
                                    }                                    

                        //  <li class="reviewLI"> review.review  review.strainId  review.title </li>                                     
                                })
                                setTimeout( () => {
                                    console.log('reviewBucket')
                                    console.log(reviewBucket)
                                }, "1000")                                
                            })
                        }   
                        userAndReviews()

                        const reviewBucketAndAppend = () => {
                            for (let i = 0; i < reviewBucket.length; i++) {
                                let loopcontent = document.createElement('p')
                                $(loopcontent)
                                .text(reviewBucket[i])
                                $('#reviewContainer').append($(loopcontent))
                            }
                            reviewBucket = []
                        }
                        reviewBucketAndAppend()
                        

                        
            $('.newGrid').on('mouseleave', (event) => {
                // inp.unbind()
                inp.bind('search')
                // $('#searchMineLabel').unbind('mouseenter')
                // $('#searchMineLabel').bind('mouseenter')

                // inp.unbind('search')            // also tried .unbind('search', (event))
                // inp.unbind()     /// i thought i needed [.bind()&&.unbind()] to reset the containers.
                // inp.bind('search')   // did this to try to reset the "[<h1>Into It:</h1>] container"
                let textBucket = []
                    likeBucket = []
                    // userObjectBucket = []
                    // objectBucket = []


                    useridbucket = [] // useridbucket.splice(0, useridbucket.length)
                    useridbucket2 = []
                    strainidbucket.splice(0, strainidbucket.length)
                    reviewBucket.splice(0, reviewBucket.length)

                    $('#reviewContainer').detach()
                    $('#reviewContainer').children().detach()
                    // $('#usernamecontainer').detach()
                    $('#usernamecontainer').detach()
                    $('#usernameP').detach()
                    $('h1').detach()
                    $('#columncont').detach() //      // $(columncont).detach() created the funciton then got an undefined error. setAttr for targetability.                     
                    $('#ptagtext').detach() // $(ptagtext).detach()
                    $(event.target).children().show()
            })
                    // }
                })                                  
            }
        })
    })
    })

    // <!-- * https://stackoverflow.com/questions/5353254/javascript-onkeydown-event-fire-only-once *************************************** BEAT THE PROBLEM!
 // Uncaught DOMException: Failed to execute 'appendChild' on 'Node': Nodes of type '#document' may not be inserted inside nodes of type '#document-fragment'        // Uncaught DOMException: Failed to execute 'appendChild' on 'Node': Nodes of type '#document' may not be inserted inside nodes of type '#document-fragment'      
    // Uncaught DOMException: Failed to execute 'insertBefore' on 'Node': The new child element contains the parent. 
    let shovel = $('.shovel')
    shovel
    .css("height", '85px')
    .css("width", '85px')
    .on('mouseenter', (event) => {
        console.log("parents!")
        let shovelBrother = $(event.target).siblings()[0].outerText
        console.log('event target siblings')
        let siblingLi = $(event.target).siblings()[0]
        
                        $.ajax({          
                            type: "POST",
                            // url: '/auth',   
                            url: '/strain/digmine',   
                            data: {
                            userkeyword: `${formName}`,
                            strainKeyword: `${shovelBrother}`,
                            into_it: true
                            }
                            }).then( (dig) => {
                                console.log(dig)
                            })
        let target = $(event.target)
        target         // id like to add a gold border-bottom for when the shovel extends downward, as if it's digging through gold.
        .animate({
            'height': '100px',
             'border': '2px solid gold'
        }, "500", () => {
            $(siblingLi).text("You're into it. You Dig it.")
            target.css('border-bottom', '2px solid gold')
        })
        .animate({
            height: '85px',
        }, "500", () => {
            target.css('border-bottom', '')
            $(siblingLi).text(`${shovelBrother}`)
    })
})
    console.log("parents")

    let strainBin = $('#strainbarrel')
    strainBin
    .css('height', '300px')
    .css('width', '300px')
    .css('margin-top', pageHeight*0.15)


    let strainCont = $('.strainContainer')
    strainCont
    .css('margin-top', '3.3em')
    .css('height', pageHeight/5)
    .css('width', '400px')
    .on('mouseleave', () => {
        // console.log("weve left the container")
    })

    $('form')
    .css('display', 'flex')
    .css("flex-direction", "column")

    $('input')
    .css('color', '#CDC7C7')

    $('.age')
    .css('margin-top', '-8em')

    let input = $('.ageconfirminput')
    input
    .css('margin-top', -pageHeight/12)
    .css('', '')
    .css('', '')
    .css('', '')
    input.on('click', (evt) => {
        input
        .css('border', '2px solid papayawhip')
    })
    let ageFromEjs = $('.hiddenUserDataReference')[0].outerText
    console.log('ageFromEjs')
    // console.log(ageFromEjs)


    const fillInput = () => {
        console.log('fill input')
        $(input).css('color', 'black')
        $(input).css('text-align', 'center')
        $(input).attr('value', ageFromEjs || 'no age' )
    }


    strainCont.on('mouseenter', async () => {
        formHover = true
         setTimeout(await fillInput, "1000")
         const smile = () => {
             if (ageFromEjs >= 18) {
                strainCont.unbind('mouseenter')

                 $('.age').text('You Are Gold Enough To Dig Around')
                 $('#submit').css('height', '2em')
                 setTimeout( () => {
                    strainCont.children().detach()
                    let barrel = document.createElement('img')
                    $(barrel).attr('src', '/img/barrels.png')
                    $(barrel).css("height", '200px')
                    $(barrel).css("width", '200px')
                    .css('margin-top', '3em')
                    strainCont.append($(barrel))
                    $(barrel)
                    $(barrel).on('mouseenter', async() => {
                        $(barrel).hide()
                        $.ajax({
                            method: 'GET',
                            url: `https://frankcollins3.github.io/strainuous/strain.json`,    // have graduated from using pokemondata to using our own premade API posted onto github platform. interesting experience pulling up simple minimumviability code in dataType.SRRINGS format. Again we could've specified our strainId in there but we perform a loop to set all id = to the sequelize auto increment [table]id
                            dataTypes: 'json',
                        }).then( (strainData) => {      // not a fan to do as much as well be doing within the ajax call.
                            console.log('strainData')
                            console.log(strainData)
                            let strainVar = strainData;

                            strainCont
                            .css('border', '5px solid papayawhip')
                            let strainList = document.createElement('ul')
                            strainCont.append(strainList)
                            strainCont.css('overflow-y', 'scroll') // hmm.. intersection observer or 10 x 10 grid. Maybe both. 
                                let i = 0;
                                strains = strainData.strains.length
                                let arrayBracketInt = 0
                                $(barrel).detach()
                                for (let i = 0; i < strainData.strains.length; i++) {

                                    let strain = document.createElement('li')
                                    $(strain)
                                    .text(strainData.strains[i].strain)
                                    .addClass('li')
                                    .css('background-image', "url('/img/gold.png')")
                                    .css('background-size', 'cover')
                                    .css('background-repeat', 'no-repeat')

                                    strainCont
                                    .addClass('doubleSize')
                                    .addClass('grid')
                                    .css('margin-top', '10em')
                                    .append($(strain))
                                }   

                                    let strainBucket = []
                                    let apiKeyword = []
                                    let objectBucket = []
                                    let photoBucket = []
                                    let clickCounter = 0
                                    let wholeCounter = []
                                    //  *&&* intersection Observer code. might do a: if $(strainCont).scroll('', ()=> observer.init() type code  -->
                                    let observerLi = document.querySelectorAll('.li')       
                                    let strainObserver = new IntersectionObserver(entries => {      // blew 40 minutes without entries.forEach( if(entry.isIntersecting)) factoring in all of the entries and using .isIntersecting is automatically also satisfying our else condition on other entries not intersecting.
                                        entries.forEach( (entry) => {
                                            
                                            console.log(entry)
                                            
                                            let strainName = entries[0].target.outerText || 'no name'
                                           
                                            let effectArray = []
                                            if (entry.isIntersecting) {       // left this off for an hour while working and wasn't impeded by it until now.
                                            for (let i = 0; i < strainData.strains.length; i++) {
                                                if (strainName == strainData.strains[i].strain) {
                                                    console.log("this the")
                                                    console.log(strainData.strains[i].strain)
                                                    strainBucket.push(strainData.strains[i].strain)
                                                    apiKeyword.push(strainData.strains[i].strain)
                                                }
                                            }

                                            let keyword = apiKeyword[0]
                                            console.log('keyword')
                                            console.log(keyword)
                                            const checkForApi = () => {
                                                for (let i = 0; i < strainData.strains.length; i++) {
                                                    if (strainData.strains[i].strain == keyword) {
                                                        console.log('okay here we go')
                                                        console.log(strainData.strains[i])
                                                        objectBucket.push(strainData.strains[i])
                                                    }
                                                }
                                            }
                                            checkForApi()
                                            console.log(objectBucket)
                                            let displayContainer = document.createElement('div')
                                            $(displayContainer).addClass('displayContainer')
                                              
                                                if ($('.containerCont').children().length < 2) {
                                                    $('.containerCont').prepend($(displayContainer))
                                                    let advice = document.createElement('p')
                                                    const giveAndTakeAdvice = async () => {
                                                        // ( async () => {
                                                            $(advice).text('Give The Goldbar a quick hover to see the mines')
                                                            const otherHalfOfAdvice = () => $(advice).text('Scroll And Click to Explore For Gold You like!')
                                                            const appendAdviceToDisplay = () => $('.displayContainer').append($(advice))
                                                            const clearDisplay =  ()=> $($(advice).css('opacity', '0.0'))
                                                            await setTimeout(appendAdviceToDisplay, "1000")
                                                            await  setTimeout(otherHalfOfAdvice, "4000")
                                                            await setTimeout(clearDisplay, "6000")
                                                            strainCont.removeClass('ghost')

                                                    }
                                                    giveAndTakeAdvice()
                                                }
                                            
                                            let arrayBracket = 0;
                                            // let newPoke = [newObject[`${startPoint++}`]];
                                            let length = strainData.strains.length;
                                            let start = length - length++;
                                       
                                            $(entry.target).on('click', (event) => {
                                                clickCounter++
                                                wholeCounter.push(clickCounter)
                                                console.log('jq entry target click')
                                                console.log(objectBucket)
                                                console.log(objectBucket[0])
                                                if (wholeCounter.length == 1) {
                                                    // $(saveButton).detach()
                                                    // $('button', 'label').detach()
                                                    $('button').detach()
                                                    $('label').detach()
                                                    // $(buttonLabel).detach()
                                                    $('button').detach()
                                                    let displayText = document.createElement('p')
                                                    $(displayText).text(objectBucket[0].strain)
                                                    // $('.displayContainer').append(objectBucket[0].strain) 
                                                    $('.displayContainer').append(displayText)
                                                }
                                                if (wholeCounter.length == 2) {
                                                    $('.displayContainer p').detach()
                                                    let displayText = document.createElement('p')
                                                    $(displayText).text(`tastes like: ${objectBucket[0].taste}`)
                                                    // $('.displayContainer').append(objectBucket[0].strain) 
                                                    $('.displayContainer').append(displayText)
                                                }
                                                if (wholeCounter.length == 3) {
                                                    $('.displayContainer p').detach()
                                                    let displayText = document.createElement('p')
                                                    $(displayText).text(`smells like: ${objectBucket[0].smell}`)
                                                    // $('.displayContainer').append(objectBucket[0].strain) 
                                                    $('.displayContainer').append(displayText)
                                                }

                                                if (wholeCounter.length == 4) {
                                                    $('.displayContainer p').detach()
                                                    let displayText = document.createElement('p')
                                                    $(displayText).text(`thc: ${objectBucket[0].thc}`)
                                                    // $('.displayContainer').append(objectBucket[0].strain) 
                                                    $('.displayContainer').append(displayText)
                                                }

                                                if (wholeCounter.length == 5) {
                                                    $('.displayContainer p').detach()
                                                    let displayText = document.createElement('p')
                                                    $(displayText).text(`cbd: ${objectBucket[0].cbd}`)
                                                    // $('.displayContainer').append(objectBucket[0].strain) 
                                                    $('.displayContainer').append(displayText)
                                                }
                                            
                                                if (wholeCounter.length == 6) {
                                                    $('.displayContainer p').detach()
                                                    let displayText = document.createElement('p')
                                                    $(displayText).text(`Fun fact!: ${objectBucket[0].funfact}`)
                                                    // $('.displayContainer').append(objectBucket[0].strain) 
                                                    $('.displayContainer').append(displayText)
                                                }
                    
                                                if (wholeCounter.length == 7) {
                                                    wholeCounter.splice(0, wholeCounter.length)
                                                    clickCounter = 0;
                                                    $('.displayContainer p').detach()
                                                    let saveButton = document.createElement('button')
                                                    let buttonLabel = document.createElement('label')
                                                    $(buttonLabel)
                                                    .css('font-weight', 'bold')
                                                    .text('save to Mines?')
                                                    .css('color', 'papayawhip')
                                                    // .css('color', 'black')
                                                    $(saveButton)
                                                    // .css("margin-top", '-3em')
                                                    .css('height', '85px')
                                                    .css('width', '85px')
                                                    .css('margin-left', '2em')
                                                    .css('margin-right', '2em')
                                                    .css('background-size', 'cover')
                                                    .css('background-repeat', 'no-repeat')
                                                    .css('background-image', "url('/img/pick.png')")

                                                    let likeButton = document.createElement('button')

                                $('.displayContainer').append($(saveButton))
                                $('.displayContainer').prepend($(buttonLabel))
                                $(saveButton).on('click',  async () => {
                                console.log('strainData in the click')
                                console.log(strainData)
                                // let input = req.body
                                for (let i = 0; i < strainData.strains.length; i++) {
                                console.log(strainData.strains[i].strain)
                                if (strainData.strains[i].strain == entry.target.outerText) {
                                    let ajax = strainData.strains[i]
                                        let ajaxStrain = ajax.strain
                                    let ajaxTaste = ajax.taste
                                    console.log("in the click and we do that")

                            $.ajax({          
                            type: "POST",
                            // url: '/auth',   
                            url: '/strain',   
                            data: {
                            userkeyword: formName,                // we can use this for user.findOne() where: {formName} userAddStrain 
                            strain: ajax.strain,
                            dominant: ajax.dominant,
                            funfact: ajax.funfact,
                                                                            
                            taste: ajax.taste,
                            smell:   ajax.smell,
                            parents: ajax.parents,
                            cbd: parseInt(ajax.cbd),    // ouch got stuck on this before and now for another 30 minutes. 
                            thc: parseInt(ajax.thc),
                            gold: ajax.gold,
                            nugget: ajax.nugget,
                            }
                            })
                   
                            }
                            }
                            })
                            }     
                        })

                                            entry.target.style.opacity = '1.0'
                                            entry.target.style.border = "5px solid papayawhip"
                                            entry.target.style.boxShadow = "3px 9px 6px rgb(247, 208, 36)"
                                            entry.target.style.boxShadow = "6px 9px 9px gray"
                                            entry.target.style.borderTop = ''
                                            

                                            } else {
                                                $('button').detach()
                                                $('label').detach()
                                                $('.displayContainer p').detach()
                                                let clickCounter = 0;
                                                wholeCounter.splice(0, wholeCounter.length)
                                                objectBucket.splice(0, objectBucket.length)

                                            }
                                        })    
                                    }, {threshold: 0.8}) // tbh i'm not sure why it's easier to get clicking on 0.8 vs 0.2 

                                    observerLi.forEach( (strain) => {
                                        strainObserver.observe(strain)
                                    })

                                    // .css('')
                                // strain[incrementer]
                            // })                                    
                        })
                    })
                //  }, "3000")
                 }, "1000")
                } else {
                    // window.location = '/'
                }

            }
        setTimeout(smile, "2000")
    })
    strainCont.on('mouseleave', () => {
    })

    let submit = $('#submit')
    submit
    .css('height', '5em')
    // .css('width', '5em')
    .css('margin-top', '20em')
    .css('border-radius', '50%')
    .css('background-color', 'transparent')
    .css('border', '2px solid transparent')
    .css("color", 'transparent')
    .css('background-image', "url('/img/barrier.png')")
    .css('background-size', 'cover')

   const hiddenPtag = $('.hiddenUserDataReference')
   hiddenPtag
//    .css('color', 'white')
   .hide()

</script>
