<!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <style>
        body {
            display: flex;
            flex-flow: column wrap;
            align-items: center;
            /* align-content: center; */
            justify-content: center;
            /* margin-top: 7rem; */
            height: 100%;
            /* align-content: center; */
        }
        .doublesize {
            transform: scale(2.0);
        }
        .captchaGrid {
            display: grid;
            height: 400px;
            width: 400px;
            /* background-color: hotpink; */
            grid-template-rows: 30% 30% 30%;
            grid-template-columns: 1fr 1fr 1fr;
        }
        .halfsize {
            transform: scale(0.5);
        }
        .gridContainer {
            transform: scale(1.75);
        }
        .sprite {
            height: 45px;
            width: 45px;
        }
        .hidden {
            opacity: 0.0;
        }
        .shrinkify {
            transform: scale(0.3);
        }
    </style>
    <body>
        <header> </header>
        <%- include('../partials/alerts.ejs') %>
        <div class="captchagrid">
            
        </div>
        

        <form method="POST" action="/auth" id="signup">   
            <!-- this has a similar scope of require('.') it still assumes current reference relative to -->
            <input type="submit" class="goldSubmit">
            <div class="formbox">
                <label for="username">Username</label> <br>
                <input type="text" id="signupusername" name="username">
            </div>
        
            <div class="formbox">
                <label for="password">Password</label> <br>
                <input type="password" id="signuppassword" name="password">
            </div>
        
            <div class="formbox">
                <label for="email">Email</label>    <br>    
                <input type="email" id="signupemail" name="email">
                <!-- type="email" id="" name="" multiple  CAN USE MULTIPLE WORD TO ALLOW MULTIPLE EMAIL ADDRESSES  -->
            </div>
        
            <div class="formbox">
                <label for="age">Age</label>    <br>    
                <!-- <input type="select" id="signupage" name="signupage">  -->
                <select id="signupage" name="age">             <!-- made an error didn't have name="age" -->
        
                    <!-- <option value="1">1</option>  --> 
                </select>
                
            </div>
            <p class="login"> Login instead? </a>

            <footer class="footer">
                <!-- <div class="hidden box"> </div> -->
                 </footer>
            
        <script src="" async defer></script>
    </body>
</html>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script>

    let input = $('input')
    let height = $(document).height().toFixed()

    let goldborder = document.createElement('div')
    $(goldborder)
    .css('height', height*0.8)
    .css('width', height*0.8)
    .css('border', '5px solid rgb(247, 208, 36)')
    

    $('body')
    .css('overflow', 'hidden')
    .css('display', 'flex')
    .css('flex-flow', 'column nowrap')
    .css('align-items', 'center')
    .css('justify-content', 'center')
    .css('height', '100vh')
    .css('background-color', 'rgb(62, 50, 32')
    
    $('.formbox')
    .css('margin-top', '2em')

    $('form')
    .hide()
    // .addClass('doublesize')
    .css('color', 'papayawhip')
    .css('text-align', 'center')
    // .css('margin-top', '12em')       // taking off our .nonUgly() margin-top: since I didn't know [height:       a height property was needed on display: flex  for align-items to work with column]
    .css('max-width', '50%')
    // .show()
    
    $('#signup')
    // .addClass()

    $('.login')
    .css('color', 'papayawhip')
    .on('mouseenter', (event) => $(event.target).css('cursor', 'pointer'))
    .on("click", () => location.href = '/auth/login')
    // .css("border", "5px solid pink")
    
    // .css("border", "5px solid hotpink")

    // .css('height', '100px') 
    // .css('width', '100px')
    $('.goldSubmit')        
    .css('color', 'transparent')
    .css('border', '1px solid transparent')
    .css('background-color', 'transparent')
    .css('margin-top', '4em')
    .css('background-image', "url('/img/gold.png')")
    .css('background-size', 'cover')
    .css('background-repeat', 'no-repeat')
    // $(waterText).css('background-image', "url('/img/text/waterText.png')")

    // .css('background-color', 'blue')
    // .css('background-image', `url(${'/img/gold.png'})`) // background image finally working  I was going to 

    // 'url(http://example.com/img.jpg)'

    let eventCount = 0
    let wholeCount = new Array()

    // <!-- ***  captcha code -->
    let gridContainer = document.createElement('div')
    $(gridContainer)
    .addClass('doublesize')
    .css('border', '5px solid papayawhip')
    .addClass('gridContainer')
    .css('height', height*0.4)
    .css('width', height*0.4)
    .css('display', 'flex')
    .css('flex-direction', 'column wrap')
    .css('justify-content', 'center')
    .css("align-items", "center")
    $('body').append($(gridContainer))

    let grid = $('.captchagrid')
    grid
    .addClass('gridcaptcha')
    .css('height', height*0.2)
    .css('width', height*0.2)
    .css('display', 'flex')
    .css("flex-flow", "row")
    .css('justify-content', 'space-between')
    .css('align-items', 'center')
    .css('border', 'transparent')
    // .css('box-shadow', '8px 12px 12px')
    $('.gridContainer').append($('.captchagrid'))

    const dynamiteoption = '/img/dynamite.png'
    const barsoption = '/img/gold-bars.png'
    const goldoption = '/img/gold.png'
    const coneoption = '/img/signupsigns.png'
    // const mineoption = '/img/mine.png'
    // const cartoption = '/img/mining-cart.png'
    const pickoption = '/img/pickaxe.png'

    const barrieroption = '/img/barrier.png'
    // const cactusoption = '/img/cactus.png'

    // const tagoption = '/img/firetag.png'

    let foundGold = false
    let foundGoldArray = ['nothing']

    let bgbucket = [dynamiteoption, barsoption, goldoption, coneoption, barrieroption, pickoption]  // Assignment to constant variable.  [const || let]
    
    let randombgvalue = bgbucket[Math.floor(Math.random()*bgbucket.length)]
    


    const createBarrier = () => {
        let barrier = document.createElement('img')
        $(barrier)
        .css('display', 'flex')
        .attr('src', '/img/barrier.png')
        .css('height', '45px')
        .css('height', '45px')
        $('.gridcaptcha').append($(barrier))
        //         let barrier = document.createElement('img')
        //         $(barrier)
        //         .css('display', 'flex')
        //         .attr('src', '/img/barrier.png')
        //         .css('height', '45px')
        //         .css('width', '45px')
        //         console.log($(barrier))
        //         $('.gridcaptcha').append($(barrier))
        //     }
    }
    // createBarrier()

    const evaluateBg = (elem) => {
        // $('.clickme').css("opacity", '0.0')
        // console.log("clicking in a callback func")
        // console.log($(elem.target))
        let objclass = $(elem.target)[0].classList[1]
        // console.log('objclass')
        // console.log(objclass)
        if (objclass.includes('gold')) {
            $('.gridContainer').detach()
            $('.gridContainer').children().detach()
            $('.label').detach()
            $('form')
            .show()
            .addClass('doublesize')
            $('.captcha')
            .addClass('fakeBoop')
            .css('margin-top', '200px')


            // foundGold = true
            foundGoldArray.push('foundgold')

            console.log('we struck gold')
            console.log("our box has our bg; which we assigned class based on the background")
        } else {
            console.log("our object has no gold in the bg or the class")
        }
    }

    const changebg = (elem) => {
                    if ($('.box')[0]) {         // i thought this code would work with just $('.box') if you take this code out you get an undefined error in [let objclass = $('.box')[0]
                let objclass = $('.box')[0].classList[1] || 'hey'   // undefined error without specifying an alternative 
                            randombgvalue = ''
                        randombgvalue = bgbucket[Math.floor(Math.random()*bgbucket.length)]
                        console.log('this is us changing the background')
                        let bg = randombgvalue  // have to set the randombg as a value and assert consistency by adding a class of the same exact name as our image background so we can target it in the $(jq) element object. if we just use [randombgvalue] separately 
                        $('.box') // i set this up as $('.box') first, and it ended up with the first assigned value remaining consistent across later instances of the function repeating. I also first had this set up as random interval. I assigned this to an event since we had greater specificity with $('.b')
                        .removeClass(objclass)    // remove whatever class is assigned every time this function runs so we can give it a new class.
                        .addClass(`${bg}`)
                        .css('background-image', `url(${bg})`)                      
                        .css('background-size', 'cover')
                        .css('background-repeat', 'no-repeat')
                      
                    } else {
                        console.log("no box!")
                    }
                    

        
    }


    const createOptionBox = () => {
        let box = document.createElement('div')
        
        $(box)
        .addClass('box')
        .css('height', '100px')
        .css('width', '100px')
        // .css('border', '5px solid papayawhip')
        .css('box-shadow', '8px 12px 8px rgb(247, 208, 36)')
        $('.gridcaptcha').append($(box))
        .on('click', (elem) => evaluateBg(elem))
        // $('.footer').append($(box))
        // .mouseenter( (elem) => changebg(elem))
        // $('body').append($(box))
        console.log('click me')
        let label = document.createElement('label')
        $(label)
        .addClass('label')
        .text($('.clickme').text()) //very cool we can access our hidden alert and just set that alert.text() to this label over here. 
        .addClass('.vanish')
        .css('color', 'rgb(247, 208, 36)')
        .attr('for', 'box')
        .addClass('doublesize')
        // .css("border", "2px dotted hotpink")
        // // .text('hey')
        // // $('.captchaGrid').insertAfter())
        $('body').append($(label))

    }
    // createOptionBox()
    const appendToGrid = () => {
        createBarrier()
        createOptionBox()
        createBarrier()
    }
    appendToGrid()


    
 
    // changebg()
    // if (foundGold === false) {

        // if (!foundGoldArray.includes('foundgold')) {
                    const checkAndRun = () => {
                        console.log("children length")
                        console.log($('.gridContainer').children().length)
                        // $(foundGoldArray).each( (i,arrayitem) => {
                        
                            // if ($(arrayitem).includes('foundgold')) { 
                            // if (arrayitem.replace(/\s/g, '') == 'foundgold') { 
                            //     console.log("foundgold in the each")
                            // } else {
                            //     console.log("we have no foundgold")
                                if ($('.gridContainer').children().length > 1) {
                                    setInterval(changebg, "1000")
                                } else {
                                    console.log("condition not met")
                                }
 
                        
                    }
                    setInterval(checkAndRun, 1000)


                // }
        // }                    // }            





  

    
    let captchaimg = document.createElement('img')
    $(captchaimg)
    .addClass('captcha')
    // .addClass('box')
    .attr('src', '/img/cone_hat.png')
    .css('height', '45px')
    .css('width', '45px')
    // $('.gridContainer').append($(captchaimg))
    $(captchaimg).insertBefore($('.gridContainer'))

    let cone = document.createElement('img')
    $(cone)
    .attr('src', coneoption)
    .css('height', '125px')
    .css('width', '125px')
$('.gridContainer').append($(cone))



    // .insertAfter($('.captchagrid'))

    // .insertAfter($('.gridContainer'))

    // for (let i = 0; i < 2; i++) {
    //     let barrier = document.createElement('img')
    //     $(barrier)
    //     .attr('src', '/img/barrier.png')
    //     .css('height', '45px')
    //     .css('width', '45px')
    //     $('.gridContainer').append$(barrier)
    // }


    // const captchaGrid = () => {
    //     let captchagrid = document.createElement('div')
    //     $(captchagrid)
    //     .addClass('captchaGrid')
    //     $('body').append($(captchagrid))

    //     console.log('captchagrid')
    //     console.log(captchagrid)
    // }
    // captchaGrid()
  
    // const addToGrid = () => {
    //     const optionbox = document.createElement('div')
    //     $(optionbox)
    //     .css('height', '125px')
    //     .css('width', '125px')
    //     .css('border', '5px solid papayawhip')
    //     $('.captchagrid').append($(optionbox))
    // }


    // <!-- *** code related to form -->
    $(document).on('mousemove', (e) => {    
        if (e.clientY < parseInt(height/1.75)) {   // nice.
            eventCount++
            wholeCount.push(eventCount)
            // if (wholeCount.length % 10 === 0) {
            if (wholeCount.length < 33) {       
                input.css('box-shadow', '3px 3px 6px papayawhip')
            } else {
                // console.log('how is you doin that')
                input.css('box-shadow', '')
                $(document).unbind()   // this'll save client performance.                 // document.body.removeEventListener('mousemove')
                // setTimeout( () => wholeCount.splice(0, wholeCount.length), "4000") // if someone wants to see this flash again I don't want the event to unbind()from the object. I just don't want this to be consistently firing, causing a performance loss. Hmm now it's stepping all over the animation from travelling inbetween the form and the focus on subtlety.
            }
        }
    })

    // let inputOption2 = document.createElement('option')         // this little form loop trick is not a 
    // $(inputOption2).attr('value', "2")                  // .attr( attributeName, value ) from documentation
    // $(inputOption2).text('2')   // always suckerpunched first with inputOption.text vs $(inputOption)
    // console.log($(inputOption2))
    for (let i = 18; i < 50; i++) {
        let inputOption = document.createElement('option')
        $(inputOption).attr('value', i.toString())          // had this put as i first with no .toString() was relively to see a huuuuge dropMenu of valueless gray. I also spelled 'value' as 'vale' this took about 7 minutes from idea to success. It may seem small but this is one of the most codey things I've ever done. Once I understood that .attr(VALUE) would be used in same way as .attr(ID) this next part might sound funny but: [i] can be annoying. I'm a little surprised you could do .toString() but it's annoying to work with (wow stopping sentence i never tried to do any $(i).css('') I am just about to type that I never got i.css to work and didn't do the $(i) if you even can.)
        $(inputOption).text(i.toString())
        // $(i).css('color', 'red') i dont think you can do this but it doesn't look like we could even do css right here. 
        $('select').append($(inputOption))
    } // ecstatic this works. plz dont mind :) 

    let option50 = document.createElement('option')
    $(option50).attr('value', '50+')
    $('select').append($(option50))     // setTimeout($('select').append($(option50)), "2000") was worried about the for loop scope and there was a sync issue that setTimeout(option.append, enoughTimeToAllowLoopToComplete)
    $(option50).text('50+')



    $('input, select').on('mouseenter', (evt) => {
        let et = $(evt.target)
        et.css('box-shadow', '3px 3px 6px papayawhip') // was going to do 

        et.on('mouseleave', () => {
        et.css('box-shadow', '1px 1px 1px rgb(247, 208, 36)')
        // console.log('et')
        // console.log(et)
        let id = et.context.id
        let cleanid = id.slice(6)               // fiddled for about 40 minutes without the .charAt part. id.charAt(1).toUpperCase().id.slice(6)
        // let cleanerid = cleanid.charAt(0).toUpperCase()
        // let cleanerid = cleanid.charAt(4).toUpperCase() // The charAt() function returns the character at a given position in a string              oh wow nice to have a 10 minute tap out and google charAt() it's returning only the character at. 

        let firstChar = cleanid.charAt(0).toUpperCase()

        //  spent close to 2 hours on this font-family function here.
        let idlength = cleanid.length        
        let cleanidSlice = cleanid.slice(1, cleanid.length)         // sername, assword, mail. took way too long to get this right.        let cleanestId = `${firstChar}${cleanidSlice}`  // pretty proud of this. I could've just changed the letter one lowercase letter down. Also could've just googled how to slice first letter off.
        let cleanestId = `${firstChar}${cleanidSlice}`
        // if (cleanid.includes('email' || 'password' || 'age' || 'username')) {  or .includes('email', 'password', 'age', etc.)
            if (cleanid == 'email' || 'password' || 'age' || 'username') {            $('label').each( (text, index) => {                // $(index).html('hey') // a little confused why .html works and .css doesn't                // if ($(index).html().toString().toLowercase().includes(cleanid)) {          // quick catch on the Email vs email
                if ($(index).html() == cleanestId) {          // quick catch on the Email vs email
                    $(index).css('font-family', 'Urw Chancery L') // would feel funny putting letter-spacing on cursive text
                    $(index).css('font-size', `22px`)
                }
                // console.log($(index).children())    //wow thought .contents() would save... $(index)[0]                 // if ($(index).text() == cleanid ) {          // $(index).includes !func_err                
                // let thiss = $(this) a bit surprised $(this) $(this.target) dont return errors $(this)[0] does. 
            })
        }
        })
    }) 

  
</script>
