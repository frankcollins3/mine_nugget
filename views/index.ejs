<!DOCTYPE html>

<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title></title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" href="/css/style.css">
    </head>
    <style>
        .mine {
             transform: scale(0.30);
        }
        section {
            display: flex;
            flex-direction: column wrap;
            align-items: center;
            margin-top: 10em;
            height: 30em;
            width: 30%;
        }
        .shrink {
            transform: scale(0.1)
        }
    </style>
    <body>
        <%- include('./partials/navbar.ejs') %>
   

        <!-- const { createCanvas, loadImage } = require('canvas')
        const canvas = createCanvas(200, 200)
        const ctx = canvas.getContext('2d')
        
        // Write "Awesome!"
        ctx.font = '30px Impact'
        ctx.rotate(0.1)
        ctx.fillText('Awesome!', 50, 100)
        
        // Draw line under text
        var text = ctx.measureText('Awesome!')
        ctx.strokeStyle = 'rgba(0,0,0,0.5)'
        ctx.beginPath()
        ctx.lineTo(50, 102)
        ctx.lineTo(50 + text.width, 102)
        ctx.stroke()
        
        // Draw cat with lime helmet
        loadImage('examples/images/lime-cat.jpg').then((image) => {
          ctx.drawImage(image, 50, 0, 70, 70)
        
          console.log('<img src="' + canvas.toDataURL() + '" />')
        }) -->

      
            




         

            <!--- 1) canvas init a little sticky i tried wasn't referencing our declared canvas variable. [loadImage('/img/mining-cart')] NO CANVAS -->
            <!-- 2) canvas.loadImage('public/img') cant do loadImage('/img/mining-cart.png')  -->

             <!-- < % const ctx = mineCanvas.getContext('2d') % >
            < % ctx.font = '18px Chancery URW L' %>
            < % ctx.drawImage(image, 25, 25, 25, 25) % > --> 
     
            
          

            
            
            
            <footer>
                <% if (sessionUser) { %>
                    <img src="/img/barrier.png" class="barrier">
                    <img src="/img/mine.png" class="mine">
                    <img src="/img/barrier.png" class="barrier">
                    <% } else { %>
                        <img src="/img/cactus.png" class="cactus"
                        <% } %>
                    </footer>
                        
                    <canvas id="canvas"></canvas>
        <%- include('./partials/alerts.ejs') %>
    </body>

              <!-- const canvas = document.getElementById('canvas');
            const ctx = canvas.getContext('2d');
            
            ctx.fillStyle = 'green';
            ctx.fillRect(10, 10, 150, 100); -->


            <% if (canvas) { %>
                <% console.log("there is the canvas") %>
                <% } else { %>
                    <% console.log("there is not the canvas") %>
                    <% } %>


                  <!-- < % const newCanvas = document.getElementById('#canvas') %>    -->
                  <!-- < % const ctx = canvas.getContext('2d') %>    -->
                  <!-- < % ctx.fillStyle = 'green' %>    -->
                  <!-- < % ctx.fillRect(10, 10, 140, 100) %>    -->
                 
                 <% %>  



</html>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>

<script>
    const newCanvas = $('#canvas')
    const ctx = canvas.getContext('2d') 
    ctx.fillStyle = 'green'
    ctx.fillRect(10, 10, 140, 100) 


    let pageHeight = $(document).height().toFixed()
    let pageWidth = $(document).height().toFixed()

    
    barrier = $(".barier")
    barrier

    // body {
    $('body')
    .css('overflow', 'hidden')
    .css("display", "flex")
    .css('flex-flow', 'column wrap')
    .css('align-items', 'center')
    .css('justify-content', 'flex-end')
    .css('height', '100%')
    .css('width','100%')
    .css('background-color', 'rgb(62, 50, 32)')

    /* background-color: rgb(46, 38, 25); back up black*/
    /* border: 5px solid rgb(247, 208, 36); */
    /* background-color: rgb(247, 208, 36); */
// }




    // $('.unlit').css('height', '200px')
    // $('.unlit').css('width', '350px')

    // $('.lit').css('height', '200px')
    // $('.lit').css('width', '350px')
    let footer = $('footer')
    footer
    .css('margin-top', '10em');
    // footer.children().forEach( (footerElement) => {         // tried footer first also tried .children()...
    //     footerElement.addClass('shrink')
    // })

    // fun to do this.

    // loopAndShrink(footer)                // leaving here for anyone who wants to see the equivalent of doing it another way. Have to force coding habit to
    // for (let i = 0; i < footer.length; i++) {
    //     console.log(footer[i])
    //     $(footer[i]).addClass("shrink")     // :]
    // }

    $('.goldbar')
    .css('height', '85px')
    .css('width', '85px')

    let mine = $('.mine')
    mine
    .addClass('mine')
    .css('margin-top', '-4.4em')

    signuptxt = $('#smoketxtsignup')
    logintxt = $('#smoketxtlogin')

    let p = $('p')
    p
    .css('font-family', 'chalkduster')
    .css('margin', '0em 8em 2em 8em')
    // .css('margin-left', '8em')
    // .css('margin-right', '8em')
    .css('box-shadow', '7px 1px 3px gray')
    // let optionInput = document.createElement('input')
    // optionInput


    // * THIS * IS * CODE * FOR * THE * M       I       N       E       *******                 G       A       M       E               **********                  ********                    *********
     let mineCartTracks = document.createElement('div')
     const tracks = $(mineCartTracks).addClass('tracks')

     tracks
      .css('width',  pageWidth*0.9)
      .css('height', pageHeight*0.1)
     .css('width',  '300px')                  
    //  if it was for the db.parents guess the child from the parents game and the correctly used associations.. I wouldn't be so willing to just set 300px values for containers. 
     .css('height', '300px')
     .css('background-color','papayawhip')
     .css('','')
    //  $('footer').append(tracks)          "the selector expression preceding the method" i like how jQ docs explain: objTarget.(methodInvoke)


//     const canvas = createCanvas(200, 200)
//     const ctx = canvas.getContext('2d')

// // Write "Awesome!"
// ctx.font = '30px Impact'
// ctx.rotate(0.1)
// ctx.fillText('Awesome!', 50, 100)

// // Draw line under text
// var text = ctx.measureText('Awesome!')
// ctx.strokeStyle = 'rgba(0,0,0,0.5)'
// ctx.beginPath()
// ctx.lineTo(50, 102)
// ctx.lineTo(50 + text.width, 102)
// ctx.stroke()

// // Draw cat with lime helmet
// loadImage('examples/images/lime-cat.jpg').then((image) => {
//   ctx.drawImage(image, 50, 0, 70, 70)

//   console.log('<img src="' + canvas.toDataURL() + '" />')
// })



    console.log('mineCanvas')       // cant access the mineCanvas down here. NO DOM. We have to append the canvas and give it a class and it will be targetable. 
    // console.log(mineCanvas) 





    
    $(mineCartTracks).insertAfter(footer) // i was using this with $(document) late at night. no sense.
     let cartForTracks = document.createElement('img')             










     let cart = $(cartForTracks)
     cart
     .css('position', 'relative')
     .css('height', '35px')
     .css('width', '35px')
     .attr('src', '/img/mining-cart.png')
     $(tracks).append(cart)

    
     const loopAndShrink = (elem) => {                   
        let i = 0;
        length = elem.length
        for (i; i < length; i++) {
            $(elem[i]).addClass('shrink')
        }
    }
    loopAndShrink(footer)
    
    let map = []
    let down = []

    const up = (jqObj) => {
        jqObj
        .animate({ left: '+5px'})
    }


    // $(document).on('keydown', 'body', cart, (e) => {
    $(document).on('keydown', 'body', (e) => {
        if (!map[e.which]) {
            console.log('hey')
            console.log(`here is the e.which ${e.which}`)
            down.push(e.which)
            // if (e.key === 'd') {
                if (down[0] == '68') {
                    console.log("lets see")
                    up(cart)
                    down = [] // wow didn't realize this is shorter code for: down.splice(0, ))
                    // cart
                }
            }
        })

                    // .animate({
                    //     left: '+5px'
                    // }, "1000", () => {
                    //     // $(document).unbind()
                    //     // $(document).bind()
                    // })





     $(document).on('key', () => {
         console.log("now we gotcha")
         if (event.key == 'd') {
             cart
             .animate({
                 left: '+5px'
             }, "1000", () => {
                 $(document).on('keydown', () => {
                     cart
                     .animate({
                         left: '+5px'
                     })
                 })
                  $(document).unbind('keydown')
                  $(document).bind('keydown')
             })
         } else if (event.key == 'a') {
             cart
             .animate({
                 right: '5px'
             }, "1000", () => {
                  $(document).unbind('keydown')
                  $(document).bind('keydown')
             })
         }
          if (event.key === 'd') {
           if (event.key === '39') {
              cart
              .animate({
                  left: 'left + 5px'
              }, "1000", () =>{
                  $(document).unbind('keydown')
                  $(document).bind('keydown')
              })
          }
        }})



</script>
